#! /usr/bin/env sh

##@fun version()
#	^	Displays the version of this file
#
# @auth Adam Brett | 2013/07/12
#
# @modified NoremacSkich | 2014/07/08
#
# @src http://goo.gl/r1TI4o | 2014/07/08
#
version() {
	echo "noremacDoc v0.1.2"
}

##@fun usage()
#	^	This displays how to use noremcDoc
#
# @auth Adam Brett | 2013/07/12
#
# @modified NoremacSkich | 2014/07/08
#
# @src http://goo.gl/r1TI4o | 2014/07/08
#
usage() {
	echo "noremacDoc is used to automatically create the commit file according to"
	echo "the standards stated in CommitColors.html"
	echo
	echo "usage:"
	echo "    git noremacDoc <subcommand>"
	echo
	echo "Available subcommands are:"
	echo "    hello         Prints out \"Hello World\""
	echo "    hello <name>  Prints out \"Hello <name>\""
}

##@fun main()
#	^	This is the primary function. Acts as a gateway to the 
#		functionality of this extension.
#
# @auth Adam Brett | 2013/07/12
#
# @modified NoremacSkich | 2014/07/08
#
# @error 1 | exit code
#	C	You didn't specify a parameter or a subcommand
#	F	Enter a valid parameter or subcommand
#
# @error 2 | exit code
#	C	You didn't specify a valid subcommand
#	F	Enter a valid subcommand
#
# @error 3 | exit code
#	C	Unable to load extension using source command.
#	F	No know fix at this time.
#
# @src http://goo.gl/r1TI4o | 2014/07/08
#
main() {
	# if the number of options is less than 1
	# Check to see if they specified a parameter or a subcommand
	if [ "$#" -lt 1 ]; then
		# if there isn't, then display how to use this function
		usage
		# Exit the function with error code of 1, to indicate that a 
		# parameter or subcommand wasn't used
		exit 1
	fi
	
	# Store the first subcommand in the subcommand variable
	local subcommand="$1"
	
	# Shift will move the "pointer" from the first parameter to the
	# second parameter.  This will allow passing of arguments to 
	# either a parameter or subcommand.
	shift
	
	# See if they inputed a valid parameter, then exit successfully
	# Have case for invalid subcommand?
	case "$subcommand" in
		"-h"|"--help")
			#Display how to use noremacDoc, and what it is used for
			usage
			#Gracefully exit the function
			exit 0
		;; #break
		"-v"|"--version")
			#Display the version number of noremacDoc
			version
			#Gracefully exit the function
			exit 0
		;; #break
	esac #end case
	
	# Get the current location of this file, and store it in WORKINGDIR.
	# We need to be mindful of cygwin users, so we need to convert the 
	# windows based file path to a linux file path. (eg replace \ with /)
	local WORKINGDIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
	
	# With the parameters out of the way, lets see if they have specified a
	# a subcommand.  We do this by checking if the script file for the 
	# subcommand exists.
	if [ ! -e "$WORKINGDIR/git-noremacDoc-$subcommand" ]; then
		# If the script file doesn't exist then we need to inform them
		# that it isn't a valid subcommand.
		echo "$subcommand isn't a valid subcommand."

		# Display the usage dialogue
		usage

		# Exit with an error of 2, to indicate incorrect subcommand.
		exit 1
	fi
	
	# Now that we know that the subcommand is valid, we should load that
	# script into the shell
	source "$WORKINGDIR/git-noremacDoc-$subcommand"
	
	# Test to see if the subcommand was loaded
	if [ ! "type cmd_$subcommand" ]; then
		# State it wasn't loaded
		echo "Found $subcommand but could not load it into the current"
		echo "shell successfully."

		# exit extension with error of 3, to indicate the inability to
		# load an extension.
		exit 3
	fi
	
	# Now that the subcommand was loaded successfully, we need to 
	# execute the command with the provided parameters.  This is where
	# the shift from ealier comes in handy.  It will make sure that
	# the subcommand will only get the arguments for it.
	cmd_$subcommand "$@"
}
# With all that done, we need to call the main function.
main "$@"

