##@fun version()
#	^	Displays the version of this file
# @auth Adam Brett | 2013/07/12
#
# @modified NoremacSkich | 2014/07/07
#
version() {
	echo "noremacDoc v0.1.0"
	echo
}
##@fun usage()
#	^	Displays the version of this file
# @auth Adam Brett | 2013/07/12
#
# @modified NoremacSkich | 2014/07/07
#

usage() {
	echo "usage: git noremacDoc <subcommand>"
	echo
	echo "Available subcommands are:"
	echo "hello <name>  Print out Hello World or Hello <name> (if provided)"}
##@fun main()
#	^	Displays the version of this file
# @auth Adam Brett | 2013/07/12
#
# @modified NoremacSkich | 2014/07/07
#

main() {
	#if the number of options is less than 1
	if [ "$#" -lt 1 ]; then
		#Display the usage dialogue, then exit
		#with fail status of 1
		usage; exit 1
	fi
	
	#Create var to store first parameter
	local subcommand="$1"
	
	#move the rest of the arguments up by one
	shift
	
	#See if they inputed a valid subcommand, then exit successfully
	#this is how switch is done in bash
	case $subcommand in
		"-h"|"--help")
		usage; exit 0
		;; #break
		"-v"|"--version")
		version; exit 0
		;; #break
	esac #end case
	
	#new variable, stores the working directory
	#sed replaces \ with / (for windows users using cygwin)
	local WORKINGDIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
	
	#see if subcommand exists, if not, exit with error 1
	#while displaying usage
	if [ ! -e "$WORKINGDIR/git-adamcodes-$subcommand" ]; then
		usage; exit 1
	fi
	
	#The sub command works, now load it into the shell
	source "$WORKINGDIR/git-adamcodes-$subcommand"
	
	#test to make sure sub command exists, 
	#if not, print usage and exit with error 1
	if [ ! type "cmd_$subcommand" ]; then
		usage; exit 1
	fi
	
	#Now run the sub command. Needs to be seperate from main function
	cmd_$subcommand "$@"
}

#now call the main function
main "$@"

